// Дано N кубиков. Требуется определить каким количеством способов можно выстроить из этих кубиков пирамиду.
// Формат ввода:
// На вход подается количество кубиков N.
// Формат вывода:
// Вывести число различных пирамид из N кубиков.

#include <iostream>
#include <vector>

using std::cin;
using std::cout;
using std::vector;
using std::endl;

// Имеется рекурентная формула pyramid[i,j] = pyramid[i - 1, j] + pyramid[i ,j - i]. Для того, чтобы реализовать решение
// с помощью одномерного массива длинной number + 1 нужно использовать построчный проход таблицы (строки постепенно
// сменяют друг друга, поднимаясь по таблице). pyramid[i - 1, j] - это элемент, который находился на одну позицию ниже
// текущего элемента в таблице, следовательно в нашем одномерном массиве этим элементом является сам текущий элемент.
// pyramid[i, j - i] находится в той же строке, что и рассматриваемый нами элемент, следоввательно, его также можно найти
// в текущей строке (но необходим начинать с j = i, иначе считаем, что pyramid[i, j - 1] = 0). Также используется тот факт,
// что в каждой строке таблицы на нулевой позиции будет единица.
long long PyramidsNumber(long long number) {
    vector<long long> array(number + 1);
    array[0] = 1; // далее не меняем, но используем в вычислениях
    for (long long i = 1; i <= number; i++) {
        for (long long j = i; j <= number; j++) {
            array[j] = array[j] + array[j - i];
        }
    }
    return array[number];
}

int main() {
    long long number;
    cin >> number;
    cout << PyramidsNumber(number);
}
// Время работы: O(n^2);
// Доп. память: O(n);